import LinkedList.SinglyLinkedList.Node;
import LinkedList.SinglyLinkedList.SinglyLinkedListPractice;

public class Main {



    public static void main(String[] args) {
        SinglyLinkedListPractice list = new SinglyLinkedListPractice();
//        list.display();
//        list.reverseLinkedList();
//        list.display();
//        list.findMiddleOfLinkedList();
//        list.display();
//        list.addLast(2);
//        list.display();
//        list.reverseLinkedList();
//        list.display();
//        list.findMiddleOfLinkedList();
//        list.display();
//        list.addLast(5);
//        list.findMiddleOfLinkedList();
//        list.display();
//        list.reverseLinkedList();
//        list.display();
//        list.addLast(9);
//        list.addLastRecursively(10);
//        list.addLast(7);
//        list.display();
//        list.isPalindrome();
//        list.display();
//        list.reverseLinkedList();
//        list.display();
//        list.findMiddleOfLinkedList();
//        list.addFirst(10);
//        list.reverseLinkedList();
//        list.display();
//        list.findMiddleOfLinkedList();
//        list.display();
//        list.deleteFirst();
//        list.display();
//        list.deleteFirst();
//        list.display();
//        list.deleteFirst();
//        list.display();
//        list.deleteFirst();
//        list.display();
//        list.deleteFirst();
//        list.display();
//        list.addFirst(10);
//        list.addLast(3);
//        list.addLast(8);
//        list.display();
//        list.deleteLast();
//        list.display();
//        list.deleteLast();
//        list.display();
//        list.deleteLast();
//        list.display();
//        list.deleteLast();
//        list.display();
//        list.deleteLast();
//        list.display();
//        list.deleteLast();
//        list.display();
//        list.isPalindrome();
//        list.addLast(10);
//        list.isPalindrome();
//        list.addLast(2);
//        list.addLast(10);
//        list.display();
//        list.isPalindrome();
//        list.display();
//        list.reverseLinkedListRecursively();
//        list.display();
//        list.deleteFromIndex(0);
//        list.display();
//        list.addLast(10);
//        list.display();
//        //list.reverseLinkedListRecursively();
//        list.display();
//        list.addLast(2);
//        list.display();
//        //list.reverseLinkedListRecursively();
//        list.display();
//        list.addLast(5);
//        list.addLast(9);
//        list.addLast(10);
//        list.addLast(7);
//        list.display();
//        list.reverseLinkedListRecursively();
//        list.display();
//        list.addAtIndex(100,0);
//        list.addAtIndexRecursively(100,0);
//        list.display();
//        list.addAtIndex(200,-1);
//        list.addAtIndexRecursively(100,0);
//        list.display();
//        list.addAtIndex(300,10);
//        list.addAtIndexRecursively(100,0);
//        list.display();
//        list.addAtIndex(150,2);
//        list.addAtIndexRecursively(100,3);
//        list.display();
//        list.addAtIndex(250,4);
//        list.addAtIndexRecursively(100,5);
//        list.display();
//        list.addAtIndex(350,3);
//        list.addAtIndexRecursively(100,2);
//        list.display();
//        list.addAtIndexRecursively(50,0);
//        list.display();
//        list.addAtIndexRecursively(150,3);
//        list.display();
//        list.addAtIndexRecursively(250,5);
//        list.display();
//        list.deleteFromIndex(1);
//        list.display();
//        list.deleteFromIndex(7);
//        list.display();
//        list.deleteFromIndex(7);
//        list.display();
//        list.deleteFromListRecursively(3);
//        list.display();
//        list.deleteFromListRecursively(0);
//        list.display();
//        list.deleteFromListRecursively(4);
//        list.display();
//        list.deleteFromListRecursively(1);
//        list.display();
//        SinglyLinkedListPractice l1 = new SinglyLinkedListPractice();
//        l1.addFirst(8);
//        l1.addFirst(4);
//        l1.addFirst(3);
//        l1.addFirst(2);
//
//        SinglyLinkedListPractice l2 = new SinglyLinkedListPractice();
//        l2.addFirst(7);
//        l2.addFirst(6);
//        l2.addFirst(5);
//        l2.addFirst(2);
//        l2.addFirst(1);
//
//        Node mergedHead = l1.mergeTwoSortedLists(l1.getHead(),l2.getHead());
//        l1.display(mergedHead);
//        list.addLast(2);
//        list.addLast(6);
//        list.addLast(1);
//        list.addLast(10);
//        list.addLast(3);
//        list.addLast(5);
//        list.addLast(7);
//        list.mergeSort();
//        list.display();
//        list.removeKthElementFromEnd(3);
//        list.display();
//        SinglyLinkedListPractice l1 = new SinglyLinkedListPractice();
//        l1.addLast(10);
//        l1.addLast(2);
//        l1.addLast(5);
//        l1.addLast(9);
//        l1.addLast(10);
//        l1.addLast(7);
//        l1.addLast(8);
//        l1.addLast(11);
//        l1.display();
//        l1.kReverseLinkedList(2);
//        l1.removeDuplicatesFromSortedLinkedList();
////        l1.oddEvenListSeparator();
//        SinglyLinkedListPractice l1 = new SinglyLinkedListPractice();
//        l1.addLast(1);
//        SinglyLinkedListPractice l2 = new SinglyLinkedListPractice();
//        l2.addLast(0);
//        l2.addLast(0);
//        l2.addLast(0);
//        l2.addLast(0);
//        l2.addLast(9);
//        l2.addLast(2);
//        l2.addLast(8);
//        l2.addLast(3);
//        l2.addLast(7);
//        l2.addLast(4);
//        l2.addLast(6);
//        l2.display(l2.preProcessList(l2.getHead()));
//        l2.display(l2.unFoldOfALinkedList(l2.getHead()));
//        l2.display(l2.foldOfALinkedList(l2.getHead()));
//        l1.display(l1.addTwoLinkedList(l1.getHead(),l2.getHead()));
//        SinglyLinkedListPractice l1 = new SinglyLinkedListPractice();
//        l1.addLast(1);
//        l1.addLast(0);
//        l1.addLast(0);
//
//        SinglyLinkedListPractice l2 = new SinglyLinkedListPractice();
//        l2.addLast(9);
//        l2.addLast(9);
//
//        l1.display(l1.subtractLists(l1.getHead(),l2.getHead()));

        SinglyLinkedListPractice l1 = new SinglyLinkedListPractice();
        l1.addLast(4);
        l1.addLast(3);
        l1.addLast(2);
        l1.addLast(6);

        SinglyLinkedListPractice l2 = new SinglyLinkedListPractice();
        l2.addLast(0);

        l1.display(l1.multiplyLinkedLists(l1.getHead(),l2.getHead()));

    }
}